# Generated by Django 2.1.7 on 2019-03-15 19:21

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('current_year', models.PositiveSmallIntegerField(choices=[(1, 'First Year'), (2, 'Second Year'), (3, 'Third Year'), (4, 'Final Year')], default=1)),
                ('interests', models.CharField(choices=[('Technical', 'Technical'), ('Non-Technical', 'Non-Technical')], max_length=15)),
                ('gender', models.PositiveSmallIntegerField(choices=[(0, 'Male'), (1, 'Female')], default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='StudentInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fathers_education', models.PositiveSmallIntegerField(choices=[(1, 'Intermediate'), (2, 'Mid-School'), (3, 'Graduation'), (4, 'Post Graduation')], default=0)),
                ('mothers_education', models.PositiveSmallIntegerField(choices=[(1, 'Intermediate'), (2, 'Mid-School'), (3, 'Graduation'), (4, 'Post Graduation')], default=0)),
                ('fathers_occupation', models.PositiveSmallIntegerField(choices=[(1, 'Business'), (2, 'Govt. Job'), (3, 'Pvt. Job')], default=0)),
                ('mothers_occupation', models.PositiveSmallIntegerField(choices=[(1, 'Business'), (2, 'Govt. Job'), (3, 'Pvt. Job')], default=0)),
                ('annual_family_income', models.PositiveSmallIntegerField(choices=[(1, 'Medium'), (2, 'High'), (3, 'Very High')], default=0)),
                ('educational_loan', models.BooleanField(default=False)),
                ('life_spent_in', models.PositiveSmallIntegerField(choices=[(1, 'Metro'), (2, 'City'), (3, 'Village')], default=0)),
                ('medium_of_instruction', models.PositiveSmallIntegerField(choices=[(1, 'English'), (2, 'Other')], default=0)),
                ('marks_in_10th', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(100)])),
                ('marks_in_12th', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(100)])),
                ('marks_in_first_year', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(100)])),
                ('marks_in_second_year', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(100)])),
                ('marks_in_third_year', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(100)])),
                ('marks_in_graduation', models.PositiveSmallIntegerField(null=True, validators=[django.core.validators.MaxValueValidator(100)])),
                ('type_of_graduation', models.PositiveSmallIntegerField(choices=[(1, 'Distance'), (2, 'Regular')], default=0)),
                ('gap_year', models.BooleanField(default=False)),
                ('hours_spent_on_academic', models.PositiveSmallIntegerField()),
                ('assertiveness', models.PositiveSmallIntegerField(choices=[(1, 'Need to Develop'), (2, 'Need to Strengthen'), (3, 'Need to Enhance')], default=0)),
                ('empathy', models.PositiveSmallIntegerField(choices=[(1, 'Need to Develop'), (2, 'Need to Strengthen'), (3, 'Need to Enhance')], default=0)),
                ('decision_making', models.PositiveSmallIntegerField(choices=[(1, 'Need to Develop'), (2, 'Need to Strengthen'), (3, 'Need to Enhance')], default=0)),
                ('leadership', models.PositiveSmallIntegerField(choices=[(1, 'Need to Develop'), (2, 'Need to Strengthen'), (3, 'Need to Enhance')], default=0)),
                ('drive', models.PositiveSmallIntegerField(choices=[(1, 'Need to Develop'), (2, 'Need to Strengthen'), (3, 'Need to Enhance')], default=0)),
                ('stress_management', models.PositiveSmallIntegerField(choices=[(1, 'Need to Develop'), (2, 'Need to Strengthen'), (3, 'Need to Enhance')], default=0)),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
